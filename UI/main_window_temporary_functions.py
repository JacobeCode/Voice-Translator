# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Voice_Translator.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
import wave
import pyaudio
import pygame
import os

from scipy.io import wavfile
from os import path
from TTSTechmo.synthesize import synthesize
from TTSTechmo.settings import setup
from EasyNMT.translator import Translator
from Whisper.whisper_class import Whisper
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog

class Ui_main_window(object):
    def __init__(self):
        self.chunk = 1024
        self.format = pyaudio.paInt16
        self.channels = 2
        self.rate = 44100
        self.file_path = 'Whisper/whisper_records/transcribtion.wav'
        self.settings = setup()
        self.asr_model = Whisper()
        self.nmt_model = Translator()
    def RecordInput(self):
        self.data_box.setText("This is recorder window\nPlease say word(s) to microphone\nPress ESC to end recording\nAfter recording - please wait, the processing will be in motion")
        pygame.init()
        screen = pygame.display.set_mode((5, 5))
        pygame.display.set_caption('Recorder')
        app_running=True
        p = pyaudio.PyAudio()

        stream = p.open(format=self.format,
                        channels=self.channels,
                        rate=self.rate,
                        input=True,
                        frames_per_buffer=self.chunk)

        frames = []

        while app_running:
                events = pygame.event.get()
                data = stream.read(self.chunk)
                frames.append(data)
                for e in events:
                    if e.type == pygame.QUIT:
                        app_running = False
                        break
                    elif e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_ESCAPE:
                            app_running = False
                            break
        pygame.quit()

        sample_width = p.get_sample_size(self.format)

        stream.stop_stream()
        stream.close()
        p.terminate()

        wf = wave.open(self.file_path, 'wb')
        wf.setnchannels(self.channels)
        wf.setsampwidth(sample_width)
        wf.setframerate(self.rate)
        wf.writeframes(b''.join(frames))
        wf.close()

        transcription, asr_time = self.asr_model.full_transcription('Whisper/whisper_records/transcribtion.wav')
        self.input_text_line_edit.setText(transcription)
        self.settings.text_to_translate = transcription
        self.data_box.setText("Processing has finished\nYour text should be in display box above\nTime of ASR process : " + str(asr_time))

    def PlaySynthesis(self):
        if path.exists("TTSTechmo/synthesis_records/synthesis.wav") == True:
            chunk=1024
            file = wave.open("TTSTechmo/synthesis_records/synthesis.wav","rb") 
            p = pyaudio.PyAudio()
            stream = p.open(format = p.get_format_from_width(file.getsampwidth()),  
                    channels = file.getnchannels(),  
                    rate = file.getframerate(),  
                    output = True)
            data = file.readframes(chunk)
            while data:  
                stream.write(data)  
                data = file.readframes(chunk)   
            stream.stop_stream()  
            stream.close()      
            p.terminate()
        elif path.exists("TTSTechmo/synthesis_records/synthesis.wav") == False:
            self.data_box.setText("There is no voice synthesis to listen. It is likely that no synthesis was carried out.")
    def SetInputText(self):
        self.settings.text_to_translate = self.input_text_line_edit.toPlainText()  
    def SetInputLanguage(self):
        if self.source_language_box.currentText() == "English":
            self.settings.language_source = 'en'
        elif self.source_language_box.currentText() == "Polish":
            self.settings.language_source = 'pl'
        elif self.source_language_box.currentText() == "Spanish":
            self.settings.language_source = 'es'
    def SetTranslationLanguage(self):
        if self.translation_language_box.currentText() == "English":
            self.settings.language = 'en'
            self.settings.tts_lang = 'tts-en'
        elif self.translation_language_box.currentText() == "Polish":
            self.settings.language = 'pl'
            self.settings.tts_lang = 'tts-pl'
        elif self.translation_language_box.currentText() == "Spanish":
            self.settings.language = 'es'
    def Translate(self):
        if self.input_text_line_edit.toPlainText() != "":
            if path.exists("TTSTechmo/synthesis_records/synthesis.wav") == True:
                os.remove("TTSTechmo/synthesis_records/synthesis.wav")
            t = time.time()
            self.settings.text = self.nmt_model.translate(self.settings.text_to_translate, self.settings.language_source, self.settings.language)
            self.output_text_edit.setText(self.settings.text)
            elapsed = time.time() - t
            self.data_box.setText("Elapsed time of operation : " + str(elapsed))
        else:
            self.data_box.setText("There is no translation text. Please write something or record your speech.")
    def TranslateAndSynthesize(self):
        if self.input_text_line_edit.toPlainText() != "":
            if path.exists("TTSTechmo/synthesis_records/synthesis.wav") == True:
                os.remove("TTSTechmo/synthesis_records/synthesis.wav")
            t = time.time()
            self.settings.text = self.nmt_model.translate(self.settings.text_to_translate, self.settings.language_source, self.settings.language)
            self.output_text_edit.setText(self.settings.text)
            tsynt = time.time()
            synthesize(self.settings)
            elapsed = time.time() - t
            elapsedsynt = time.time() - tsynt
            if path.exists("TTSTechmo/synthesis_records/synthesis.wav") == True:
                self.data_box.setText("Elapsed time of operation : " + str(elapsed) + "\nSynthesis elapsed time : " + str(elapsedsynt) + "\nTranslation elapsed time : " + str(elapsed - elapsedsynt))
            elif path.exists("TTSTechmo/synthesis_records/synthesis.wav") == False:
                self.data_box.setText("Sorry, but it seems that TTS service is unreachable right now, please try again later.\nTranslation elapsed time : " + str(elapsed - elapsedsynt))
        else:
            self.data_box.setText("There is no translation text. Please write something or record your speech.")    
    def ReplaceLanguages(self):
        source_lang = self.source_language_box.currentIndex()
        self.source_language_box.setCurrentIndex(self.translation_language_box.currentIndex())
        self.translation_language_box.setCurrentIndex(source_lang)
        self.SetInputLanguage()
        self.SetTranslationLanguage()
    def load_speech(self):
        fname = QFileDialog.getOpenFileName(self, "Open File", "c:", "Wave Files (*.wav)")
        if fname[0] == "":
            self.data_box.setText("You didn't choose import file.")  
        elif fname[0] != "":
            start = time.time()
            transcription, asr_time = self.asr_model.full_transcription(str(fname[0]))
            asr_time = time.time() - start
            self.input_text_line_edit.setText(transcription)
            self.settings.text_to_translate = transcription    
            self.data_box.setText("Processing has finished\nYour text should be in display box above\nTime of ASR process : " + str(asr_time))
    def save_synthesis(self):
        fname = QFileDialog.getSaveFileName(self, "Save synthesis", "", "Wave Files (*.wav)")
        if fname == "":
            self.data_box.setText("You didn't choose export directory.")  
        elif fname[0] != "":
                if path.exists("TTSTechmo/synthesis_records/synthesis.wav") == True:
                    synthesis = wavfile.read("TTSTechmo/synthesis_records/synthesis.wav")
                    wavfile.write(fname[0], synthesis[0], synthesis[1])
                elif path.exists("TTSTechmo/synthesis_records/synthesis.wav") == False:
                    self.data_box.setText("There is no synthesis to save.")

# -----

        self.actionImport.triggered.connect(main_window.load_speech)
        self.actionExport.triggered.connect(main_window.save_synthesis)
        self.actionExit.triggered.connect(lambda:main_window.close())